---
import ContentPage from "@/components/content-page.astro";
import { links } from "@/config/navigation.config";
import PageLayout from "@/layouts/page-layout.astro";
---

<PageLayout title={links.entities_places.label}>
	<ContentPage title={links.entities_places.title} layout="full-width">
		<div id="worldmap" class="not-prose min-h-[50vh] md:min-h-screen"></div>
		<div id="places_table"></div>
		<script>
			import { TabulatorFull as Tabulator } from "tabulator-tables";
			const current_url = window.location.origin + window.location.pathname;
			//define data array
			function refine_tabulatordata(tabulator_data) {
				let new_tabulator_data = tabulator_data;
				//let i = 0;
				//while (i < tabulator_data.length) {
				//	let coordinates = new_tabulator_data[i].coordinates;
				//	delete new_tabulator_data[i].coordinates;
				//	let name = new_tabulator_data[i].name;
				//	new_tabulator_data[i].name = [name, coordinates];
				//	i++;
				//}
				//console.log("refined");
				//console.log(tabulator_data);
				return new_tabulator_data;
			}

			function fetch_tabulatordata_and_build_table(url, map) {
				console.log("loading table");
				fetch(url)
					.then(function (response) {
						// json string
						return response.json();
					})
					.then(function (tabulator_data) {
						buildTable(tabulator_data, map);
					})
					.catch(function (err) {
						console.log(err);
					});
			}

			function get_html_link(name, url) {
				return `<a href='${url}'>${name}</a>`;
			}

			function get_html_list(array) {
				return `<ul><li>${array.join("</li><li>")}</li></ul>`;
			}

			function get_scrollable_cell(table, cell, cell_html_string = undefined) {
				if (cell_html_string === undefined) {
					cell_html_string = cell.getValue();
				}
				var cell_html_element = cell.getElement();
				cell_html_element.style.whiteSpace = "pre-wrap";
				cell_html_element.style.overflow = "auto";
				cell_html_element.style.maxHeight = "100px";
				let final_val = table.emptyToSpace(cell_html_string);
				console.log(final_val);
				return final_val;
			}

			function buildTable(tabulator_data, map) {
				var table = new Tabulator("#places_table", {
					data: refine_tabulatordata(tabulator_data), //assign data to table
					columns: [
						{
							title: "name",
							field: "name",
							formatter: function (cell) {
								return cell.getValue()[0];
							},
						},
						{
							title: "geonames",
							field: "geonames",
							formatter: function (cell) {
								return get_html_link(cell.getValue()[0], cell.getValue()[1]);
							},
						},
						{
							title: "mentioned in",
							field: "mentions",
							//formatter: customTextareaFormatter,
							formatter: function (cell) {
								let values = cell.getValue();
								let i = 0;
								let links = [];
								while (i < values.length) {
									let pair = values[i];
									links.push(get_html_link(pair[0], pair[1]));
									i++;
								}
								let basic_html = get_html_list(links);
								return get_scrollable_cell(this, cell, basic_html);
							},
						},
						{
							title: "alternative names",
							field: "alt_names",
							formatter: function (cell) {
								let values = cell.getValue();
								if (values.length != 0) {
									return get_html_list(values);
								} else {
									return "";
								}
							},
						},
						{ title: "total occurences", field: "total_occurences" },
					],
					height: "311px",
					layout: "fitColumns",
					width: "30rem",
				});
				console.log("made table");
				table.on("rowClick", function (event, row) {
					//e - the click event object
					//cell - cell component
					let data = row.getData().name;
					console.log(row.getData());
					let lng = data[1][0];
					let lat = data[1][1];
					let zoom = "10";
					//map.panTo(new L.LatLng(lat, lng));
					map.setView([lat, lng], zoom);
					//map.flyTo([lat, lng], 10);
					console.log("done");
					//let name_cell = row.getCell("name");
					//console.log(name_cell);
				});
			}

			/////////////////////
			// building the map//
			/////////////////////

			import L from "leaflet";

			function get_label_string_html(properties) {
				let number_of_plays_mentioning = properties.mentioned_in.length;
				// could use properties.total_occurences later
				let label_string = `<b>${properties.name}</b><br>(occurring in ${number_of_plays_mentioning} plays)<br>`;
				let plays_list_start = "<ul>";
				let plays_list_end = "</ul>";
				properties.mentioned_in.forEach((mention) => {
					let table_index = mention.id;
					let nestroy_id = mention.value;
					let play_title = mention.title;
					plays_list_start += `<li><a href='${nestroy_id}'>${play_title}</a></li>`;
				});
				return label_string + plays_list_start + plays_list_end;
			}

			function addPopupString(feature, layer) {
				let popupString = get_label_string_html(feature.properties);
				layer.bindPopup(popupString);
			}

			function draw_cirlce(latLng, feature) {
				let radius = feature.properties.mentioned_in.length;
				//let html_dot = `<span style="height: 5px; width: 5px; background-color: black; border-radius: 50%; display: inline-block; margin: auto; position: relative;"/>`
				let html_dot = "";
				let border_width = 4;
				let border_color = "red";
				let background_color = "coral";
				let size = radius * 10;
				let circle_style = `style="width: ${size}px; height: ${size}px; border-radius: 50%; display: table-cell; border: ${border_width}px solid ${border_color};  background: rgba(255, 0, 0, .5); overflow: hidden; position: absolute"`;
				//let iconSize = size + border_width * 2;
				let iconSize = size;
				let icon = L.divIcon({
					html: `<span ${circle_style}>${html_dot}</span>`,
					className: "",
					iconSize: [iconSize, iconSize],
				});
				let marker = L.marker(latLng, {
					icon: icon,
				});
				return marker;
			}

			function populateMap(geojsonFeature, map) {
				L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
					maxZoom: 19,
					attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
				}).addTo(map);
				L.geoJSON(geojsonFeature, {
					pointToLayer: function (feature, latlng) {
						//return L.marker(latlng, { icon: myIcon });
						return draw_cirlce(latlng, feature);
					},
					onEachFeature: addPopupString,
				}).addTo(map);
			}

			function fetch_geodata_and_build_map(url) {
				console.log("loading map");
				let map = L.map("worldmap").setView([48.210033, 16.363449], 5);
				fetch(url)
					.then(function (response) {
						// json string
						return response.json();
					})
					.then(function (geojsonFeature) {
						populateMap(geojsonFeature, map);
					})
					.catch(function (err) {
						console.log(err);
					});
				return map;
			}

			// okay, lets build a map and table
			let raw_geodata_url =
				"https://raw.githubusercontent.com/NestroyCA/baserow-entities/main/json_dumps/places_geodata.json";
			let map = fetch_geodata_and_build_map(raw_geodata_url);
			let raw_tabulator_data_url =
				"https://raw.githubusercontent.com/NestroyCA/baserow-entities/main/json_dumps/tabulator_data.json";
			var table = fetch_tabulatordata_and_build_table(raw_tabulator_data_url, map);
		</script>
	</ContentPage>
</PageLayout>
